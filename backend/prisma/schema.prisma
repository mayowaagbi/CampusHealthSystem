datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  RESCHEDULED
  MISSED
}

enum UserRole {
  ADMIN
  STUDENT
  PROVIDER
  SUPPORT
}

enum FileCategory {
  MEDICAL_REPORT
  LAB_RESULT
  PRESCRIPTION
  IMAGING
  CONSENT_FORM
  IDENTIFICATION
  AMBULANCE_REQUEST
  OTHER
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  role         UserRole
  mfaEnabled   Boolean   @default(false)
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  stepGoal     Int       @default(10000)

  profile                     Profile?
  sessions                    Session[]
  logs                        AuditLog[]
  notifications               Notification[]
  locations                   UserLocation[]
  stepEntries                 StepEntry[]
  files                       File[]
  ambulanceRequests           AmbulanceRequest[]
  waterGoals                  WaterGoal[]
  appointmentHistoriesCreated AppointmentHistory[] @relation("UserAppointmentChanges")

  @@index([email, createdAt])
}

model Profile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  firstName   String?
  lastName    String?
  dateOfBirth DateTime?
  phone       String?   @unique
  avatar      String?
  bio         String?

  studentDetails    StudentDetails?
  providerDetails   ProviderDetails?
  emergencyContacts EmergencyContact[]

  @@index([firstName, lastName])
}

model StudentDetails {
  id                    String  @id @default(uuid())
  profileId             String  @unique
  profile               Profile @relation(fields: [profileId], references: [id])
  studentId             String  @unique
  insuranceNumber       String?
  primaryCareProviderId String?

  healthRecords  HealthRecord[]
  appointments   Appointment[]
  journalEntries JournalEntry[]
  moodEntries    MoodEntry[]

  @@index([studentId])
}

model ProviderDetails {
  id             String  @id @default(uuid())
  profileId      String  @unique
  profile        Profile @relation(fields: [profileId], references: [id])
  licenseNumber  String  @unique
  specialization String
  department     String
  available      Boolean @default(true)

  appointments   Appointment[]
  qualifications ProviderQualification[]
  schedules      AvailabilitySchedule[]
  healthRecords  HealthRecord[]          @relation("ProviderHealthRecords")

  @@index([licenseNumber, specialization])
}
 
model Appointment {
  id         String            @id @default(uuid())
  studentId  String
  providerId String?
  startTime  DateTime
  duration   Int
  service    String            // Added this field
  status     AppointmentStatus @default(PENDING)
  priority   Int               @default(3)
  location   String?
  notes      String?

  student   StudentDetails        @relation(fields: [studentId], references: [id])
  provider  ProviderDetails?       @relation(fields: [providerId], references: [id])
  histories AppointmentHistory[]
  documents AppointmentDocument[]

  @@index([studentId, providerId, startTime])
}


model HealthRecord {
  id            String            @id @default(uuid())
  studentId     String
  providerId    String
  recordedAt    DateTime          @default(now())
  title         String
  description   String
  diagnosis     String
  prescriptions Prescription[]
  documents     MedicalDocument[]

  student  StudentDetails  @relation(fields: [studentId], references: [id])
  provider ProviderDetails @relation(fields: [providerId], references: [id], name: "ProviderHealthRecords")

  @@index([studentId, recordedAt])
}

model JournalEntry {
  id        String   @id @default(uuid())
  studentId String
  title     String
  content   String
  createdAt DateTime @default(now())

  student StudentDetails @relation(fields: [studentId], references: [id])
}

model MoodEntry {
  id        String   @id @default(uuid())
  studentId String
  mood      String
  notes     String?
  createdAt DateTime @default(now())

  student StudentDetails @relation(fields: [studentId], references: [id])
}

model ProviderQualification {
  id            String @id @default(uuid())
  providerId    String
  qualification String
  institution   String
  yearObtained  Int

  provider ProviderDetails @relation(fields: [providerId], references: [id])
}

model AvailabilitySchedule {
  id         String   @id @default(uuid())
  providerId String
  startTime  DateTime
  endTime    DateTime
  recurrence String?
  createdAt  DateTime @default(now())

  provider ProviderDetails @relation(fields: [providerId], references: [id])
}

model AppointmentHistory {
  id            String   @id @default(uuid())
  appointmentId String
  status        String
  changedById   String
  timestamp     DateTime @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
  changedBy   User        @relation(fields: [changedById], references: [id], name: "UserAppointmentChanges")
}

model AppointmentDocument {
  id            String   @id @default(uuid())
  appointmentId String
  name          String
  filePath      String
  uploadedAt    DateTime @default(now())

  appointment Appointment @relation(fields: [appointmentId], references: [id])
}

model Prescription {
  id           String @id @default(uuid())
  recordId     String
  medication   String
  dosage       String
  instructions String
  refills      Int    @default(0)

  record HealthRecord @relation(fields: [recordId], references: [id])
}

model EmergencyContact {
  id           String  @id @default(uuid())
  profileId    String
  name         String
  relationship String
  phone        String
  email        String?
  priority     Int     @default(1)

  profile Profile @relation(fields: [profileId], references: [id])
}

model Notification {
  id        String    @id @default(uuid())
  userId    String
  type      String
  title     String
  content   String
  read      Boolean   @default(false)
  priority  Int       @default(3)
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])
}

model MedicalDocument {
  id          String       @id @default(uuid())
  recordId    String
  name        String
  type        FileCategory
  storagePath String
  uploadedBy  String
  uploadedAt  DateTime     @default(now())

  record HealthRecord @relation(fields: [recordId], references: [id])
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  userAgent String?
  ipAddress String?
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model AuditLog {
  id          String   @id @default(uuid())
  userId      String?
  actionType  String
  targetId    String?
  description String
  ipAddress   String?
  createdAt   DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

model SystemConfig {
  id    String @id @default(uuid())
  key   String @unique
  value String
  type  String
}

model UserLocation {
  id        String   @id @default(uuid())
  userId    String
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, timestamp])
}

model StepEntry {
  id     String   @id @default(uuid())
  userId String
  date   DateTime @default(now())
  steps  Int
  source String   @default("GEO") // GEO, MANUAL
  user   User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId, date])
}

model File {
  id          String   @id @default(uuid())
  userId      String
  url         String
  type        FileType
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

enum FileType {
  AMBULANCE_REQUEST
  PROFILE
  MEDICAL_REPORT
  OTHER
}

model AmbulanceRequest {
  id        String        @id @default(uuid())
  userId    String
  status    RequestStatus @default(PENDING)
  latitude  Float
  longitude Float
  address   String?
  files     String[] // Array of file URLs
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  user      User          @relation(fields: [userId], references: [id])

  @@index([userId, status])
}

enum RequestStatus {
  PENDING
  DISPATCHED
  COMPLETED
  CANCELLED
}

model WaterGoal {
  id      String   @id @default(uuid())
  userId  String
  target  Int      @default(2000) // Default 2000ml
  current Int      @default(0)
  date    DateTime @default(now()) @db.Date
  user    User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId, date])
}
